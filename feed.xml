<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://timewh.github.io/</id><title>TIME WH</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2022-12-22T18:19:51+08:00</updated> <author> <name>wu hou</name> <uri>https://timewh.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://timewh.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://timewh.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator> <rights> © 2022 wu hou </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Test</title><link href="https://timewh.github.io/posts/test/" rel="alternate" type="text/html" title="Test" /><published>2022-12-12T00:00:00+08:00</published> <updated>2022-12-22T18:19:29+08:00</updated> <id>https://timewh.github.io/posts/test/</id> <content src="https://timewh.github.io/posts/test/" /> <author> <name>wu hou</name> </author> <summary> just test #this is the test,use the github repo for picgo. </summary> </entry> <entry><title>Cordova</title><link href="https://timewh.github.io/posts/cordova/" rel="alternate" type="text/html" title="Cordova" /><published>2022-03-31T00:00:00+08:00</published> <updated>2022-03-31T00:00:00+08:00</updated> <id>https://timewh.github.io/posts/cordova/</id> <content src="https://timewh.github.io/posts/cordova/" /> <author> <name>wu hou</name> </author> <summary> 前记 受到开源工程Thunder Scope的启示，他使用了electron作为用户程序界面，进而在知乎找到了一份关于界面开发的讨论：https://www.zhihu.com/question/264999651 个人总结就是：WPF适合目前Win桌面开发，嵌入式用Qt，Web前端就是Html5+JS。 而electron可以应对一些基础的应用，一般编译出来的程序体积较大及效率较低，主要面向前端开发者，深入定制对开发者要求较高。（我自己一直也这么认为的，所以一看到‘Thunder Scope’使用，我非常惊讶。但他代表了一种趋势，记得大概8年前我第一次接触Qt，发现这玩意编译出来的程序体积及内存占用远比我最初用的MFC高，当时就果断放弃了继续使用，一直用MFC，导致我做的界面总是好像上个世纪的产品，并且开发效率极低。而Qt这么多年的改进，明显感觉效率几经很高了，而且还是跨平... </summary> </entry> <entry><title>Bash</title><link href="https://timewh.github.io/posts/bash/" rel="alternate" type="text/html" title="Bash" /><published>2022-01-07T00:00:00+08:00</published> <updated>2022-01-07T00:00:00+08:00</updated> <id>https://timewh.github.io/posts/bash/</id> <content src="https://timewh.github.io/posts/bash/" /> <author> <name>wu hou</name> </author> <summary> merge for (( i=1 ; i&amp;lt;21 ; i++ )) ; do cat ./js_sb${i}.txt &amp;gt;&amp;gt; ./js_gt${i}.txt; cat ./js_gt${i}.txt | sed '/^$/d' &amp;gt; ./js_mcio${i}.txt; done </summary> </entry> <entry><title>Axi</title><link href="https://timewh.github.io/posts/axi/" rel="alternate" type="text/html" title="Axi" /><published>2021-12-24T00:00:00+08:00</published> <updated>2022-03-31T12:03:46+08:00</updated> <id>https://timewh.github.io/posts/axi/</id> <content src="https://timewh.github.io/posts/axi/" /> <author> <name>wu hou</name> </author> <summary> 1，axi width convert 比如32数据位宽转512数据位宽， 那么在32位宽端对0，4，8的写操作将变为 在512位宽端对地址0的strb写操作。（strb信号用来指示512bit即64字节在哪些位置的byte是有效的） 逻辑上理解可以无缝转换。 但实际对于4/8等地址的操作是无效的，只能0/64/128/… 32位宽端的busrt操作会被转化为512端的64bit strb全f操作 </summary> </entry> <entry><title>Time WH!</title><link href="https://timewh.github.io/posts/Time-WH/" rel="alternate" type="text/html" title="Time WH!" /><published>2021-11-20T13:23:41+08:00</published> <updated>2021-11-21T09:59:09+08:00</updated> <id>https://timewh.github.io/posts/Time-WH/</id> <content src="https://timewh.github.io/posts/Time-WH/" /> <author> <name>wu hou</name> </author> <category term="Animal" /> <category term="Insect" /> <summary> layout: post title: “Time WH!” date: 2021-11-21 00:23:41 -0500 categories: jekyll update — You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated. Jekyll re... </summary> </entry> </feed>
